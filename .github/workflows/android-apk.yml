name: android-apk (debug)

on:
  push:
    branches: [ "dguo" ]
  pull_request:
    branches: [ "dguo" ]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

env:
  JAVA_VERSION: "17"                              # sdkmanager 需要 JDK 17+
  ANDROID_SDK_ROOT: ${{ github.workspace }}/android-sdk
  ANDROID_PLATFORM_PKG: "platforms;android-34"    # 若 compileSdkVersion ≠ 34，请改这里
  ANDROID_BUILD_TOOLS_PKG: "build-tools;34.0.0"   # 同步改成匹配版本（如 33.0.2）

jobs:
  build-apk-debug:
    name: Build Debug APK
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Java (JDK 17)
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: ${{ env.JAVA_VERSION }}

      - name: Setup Gradle cache
        uses: gradle/actions/setup-gradle@v3

      # 手动下载安装 commandline-tools，多版本兜底；失败则回落到 Runner 自带
      - name: Install Android commandline-tools (multi-version fallback)
        shell: bash
        run: |
          set -eu
          SDK_ROOT="${ANDROID_SDK_ROOT}"
          mkdir -p "${SDK_ROOT}/cmdline-tools"

          # 依次尝试这些已知可用版本号（Google 官方命名：commandlinetools-linux-<ver>_latest.zip）
          VERSIONS=(12266719 11076708 10406996)
          SUCCESS=0
          for VER in "${VERSIONS[@]}"; do
            URL="https://dl.google.com/android/repository/commandlinetools-linux-${VER}_latest.zip"
            echo "Trying to download cmdline-tools: ${URL}"
            if curl -fsSL -o /tmp/cmdline-tools.zip "${URL}"; then
              rm -rf /tmp/cmdline-tools && mkdir -p /tmp/cmdline-tools
              unzip -q /tmp/cmdline-tools.zip -d /tmp/cmdline-tools
              rm -rf "${SDK_ROOT}/cmdline-tools/latest"
              mv /tmp/cmdline-tools/cmdline-tools "${SDK_ROOT}/cmdline-tools/latest"
              SUCCESS=1
              echo "Installed cmdline-tools version token: ${VER}"
              break
            else
              echo "Download failed for version ${VER}, trying next..."
            fi
          done

          if [ "${SUCCESS}" -eq 0 ]; then
            echo "Falling back to runner preinstalled cmdline-tools (if present)..."
            PRE="/usr/local/lib/android/sdk/cmdline-tools/latest"
            if [ -x "${PRE}/bin/sdkmanager" ]; then
              # 复制一份到工作区，保证写权限与路径一致
              rm -rf "${SDK_ROOT}/cmdline-tools/latest"
              mkdir -p "${SDK_ROOT}/cmdline-tools"
              cp -r "${PRE%/cmdline-tools/latest}"/* "${SDK_ROOT}/cmdline-tools/"
            else
              echo "No usable cmdline-tools found. Abort." >&2
              exit 1
            fi
          fi

          # 暴露 PATH & 环境变量给后续步骤
          {
            echo "ANDROID_SDK_ROOT=${SDK_ROOT}"
            echo "ANDROID_HOME=${SDK_ROOT}"
          } >> "$GITHUB_ENV"
          {
            echo "${SDK_ROOT}/cmdline-tools/latest/bin"
            echo "${SDK_ROOT}/platform-tools"
          } >> "$GITHUB_PATH"

          echo "cmdline-tools ready at: ${SDK_ROOT}/cmdline-tools/latest"
          "${SDK_ROOT}/cmdline-tools/latest/bin/sdkmanager" --version || true

      # 接受许可证 + 分别安装平台与构建工具（容错+重试，规避 Broken pipe/偶发非零返回码）
      - name: Accept licenses & install Android packages
        shell: bash
        env:
          SDK_ROOT: ${{ env.ANDROID_SDK_ROOT }}
        run: |
          set -eu
          SDKMANAGER="${SDK_ROOT}/cmdline-tools/latest/bin/sdkmanager"

          retry() {
            local n=0 max=3 delay=5
            until "$@"; do
              code=$?
              n=$((n+1))
              if [ $n -lt $max ]; then
                echo "Command failed (exit ${code}). Retrying ${n}/${max} in ${delay}s..."
                sleep ${delay}
              else
                echo "Command failed after ${max} attempts."
                return ${code}
              fi
            done
          }

          yes | "${SDKMANAGER}" --sdk_root="${SDK_ROOT}" --licenses || echo "licenses returned non-zero; continuing"

          retry bash -lc "yes | '${SDKMANAGER}' --sdk_root='${SDK_ROOT}' '${ANDROID_PLATFORM_PKG}'"
          retry bash -lc "yes | '${SDKMANAGER}' --sdk_root='${SDK_ROOT}' '${ANDROID_BUILD_TOOLS_PKG}'"
          retry bash -lc "yes | '${SDKMANAGER}' --sdk_root='${SDK_ROOT}' 'platform-tools'"

          echo "Installed packages:"
          "${SDKMANAGER}" --sdk_root="${SDK_ROOT}" --list_installed || true

      # 如果 Android 工程目录不是 project/，把 working-directory 改为实际路径
      - name: Grant execute permission for gradlew
        working-directory: project
        run: chmod +x ./gradlew

      - name: Build Debug APK
        working-directory: project
        env:
          ANDROID_SDK_ROOT: ${{ env.ANDROID_SDK_ROOT }}
          ANDROID_HOME: ${{ env.ANDROID_SDK_ROOT }}
        run: ./gradlew --no-daemon clean assembleDebug

      # 收集 APK，扁平化重命名（下载压缩包根目录即 APK）
      - name: Collect & rename APKs (flat)
        id: collect
        shell: bash
        run: |
          set -eu
          mkdir -p artifacts
          shopt -s globstar nullglob
          count=0
          shortsha="${GITHUB_SHA::7}"
          for apk in project/**/build/outputs/apk/debug/*.apk; do
            module="$(echo "$apk" | sed -E 's#project/([^/]+)/build/outputs/apk/debug/[^/]+$#\1#')"
            [ -z "$module" ] && module="app"
            out="artifacts/${module}-debug-${GITHUB_RUN_NUMBER}-${shortsha}.apk"
            cp -f "$apk" "$out"
            echo "collected: $out"
            count=$((count+1))
          done
          if [ "$count" -eq 0 ]; then
            echo "没有找到 Debug APK；请确认模块路径与 assembleDebug 任务。" >&2
            exit 1
          fi
          echo "apk_count=$count" >> "$GITHUB_OUTPUT"

      - name: Upload Debug APK artifact (flat)
        uses: actions/upload-artifact@v4
        with:
          name: apk-debug-${{ github.run_number }}
          path: artifacts/*.apk
          if-no-files-found: error
          retention-days: 14
