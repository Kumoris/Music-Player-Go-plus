name: android-apk (debug)

on:
  push:
    branches: [ "dguo" ]
  pull_request:
    branches: [ "dguo" ]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

env:
  JAVA_VERSION: "17"   # sdkmanager 需 JDK 17+
  ANDROID_PLATFORM: "platforms;android-34"
  ANDROID_BUILD_TOOLS: "build-tools;34.0.0"

jobs:
  build-apk-debug:
    name: Build Debug APK
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Java (JDK 17)
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: ${{ env.JAVA_VERSION }}

      - name: Setup Gradle (cache)
        uses: gradle/actions/setup-gradle@v3

      # 不再依赖 action 的 packages 解析，手动用 sdkmanager 安装
      - name: Install Android SDK packages
        shell: bash
        env:
          ANDROID_SDK_ROOT: /usr/local/lib/android/sdk
        run: |
          set -euo pipefail
          SDK_ROOT="${ANDROID_SDK_ROOT:-/usr/local/lib/android/sdk}"

          # 找到可用的 sdkmanager 可执行文件
          if [ -x "$SDK_ROOT/cmdline-tools/latest/bin/sdkmanager" ]; then
            SDKMANAGER="$SDK_ROOT/cmdline-tools/latest/bin/sdkmanager"
          else
            SDKMANAGER="$(find "$SDK_ROOT/cmdline-tools" -type f -path '*/bin/sdkmanager' | sort -r | head -n1 || true)"
          fi

          if [ -z "${SDKMANAGER:-}" ] || [ ! -x "$SDKMANAGER" ]; then
            echo "sdkmanager 未找到，正在下载 commandline-tools ..." >&2
            mkdir -p "$SDK_ROOT/cmdline-tools"
            curl -fsSL -o /tmp/cmdline-tools.zip https://dl.google.com/android/repository/commandlinetools-linux-12266719_latest.zip
            unzip -q /tmp/cmdline-tools.zip -d /tmp/cmdline-tools
            mv /tmp/cmdline-tools/cmdline-tools "$SDK_ROOT/cmdline-tools/latest"
            SDKMANAGER="$SDK_ROOT/cmdline-tools/latest/bin/sdkmanager"
          fi

          # 接受许可证（需要 JDK 17）
          yes | "$SDKMANAGER" --licenses

          # 安装平台与构建工具（分别作为独立参数传入）
          "$SDKMANAGER" "$ANDROID_PLATFORM" "$ANDROID_BUILD_TOOLS" "platform-tools"

      # 如果 Android 工程目录不是 project/，把 working-directory 改为实际路径
      - name: Grant execute permission for gradlew
        working-directory: project
        run: chmod +x ./gradlew

      - name: Build Debug APK
        working-directory: project
        run: ./gradlew --no-daemon clean assembleDebug

      # 收集 APK 到扁平目录并语义化命名
      - name: Collect & rename APKs (flat)
        id: collect
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p artifacts
          shopt -s globstar nullglob
          count=0
          shortsha="${GITHUB_SHA::7}"
          for apk in project/**/build/outputs/apk/debug/*.apk; do
            module="$(echo "$apk" | sed -E 's#project/([^/]+)/build/outputs/apk/debug/[^/]+$#\1#')"
            [ -z "$module" ] && module="app"
            out="artifacts/${module}-debug-${GITHUB_RUN_NUMBER}-${shortsha}.apk"
            cp -f "$apk" "$out"
            echo "collected: $out"
            count=$((count+1))
          done
          if [ "$count" -eq 0 ]; then
            echo "没有找到 Debug APK，请确认模块路径与 assembleDebug 任务。" >&2
            exit 1
          fi
          echo "apk_count=$count" >> "$GITHUB_OUTPUT"

      - name: Upload Debug APK artifact (flat)
        uses: actions/upload-artifact@v4
        with:
          name: apk-debug-${{ github.run_number }}
          path: artifacts/*.apk
          if-no-files-found: error
          retention-days: 14
