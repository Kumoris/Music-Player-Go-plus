name: android-apk (debug)

on:
  push:
    branches: [ "dguo" ]
  pull_request:
    branches: [ "dguo" ]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

env:
  # sdkmanager 需要 JDK 17+
  JAVA_VERSION: "17"
  ANDROID_SDK_ROOT: "${{ runner.home }}/android-sdk"
  ANDROID_PLATFORM_PKG: "platforms;android-34"
  ANDROID_BUILD_TOOLS_PKG: "build-tools;34.0.0"

jobs:
  build-apk-debug:
    name: Build Debug APK
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Java (JDK 17)
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: ${{ env.JAVA_VERSION }}

      - name: Setup Gradle (cache)
        uses: gradle/actions/setup-gradle@v3

      # 手动安装最新 commandline-tools 到 $HOME/android-sdk（避免系统里旧版本导致 XML v4 报警）
      - name: Install Android commandline-tools (latest)
        shell: bash
        run: |
          set -euo pipefail
          SDK_ROOT="${ANDROID_SDK_ROOT}"
          mkdir -p "${SDK_ROOT}/cmdline-tools"

          echo "Downloading Android commandline-tools (latest)..."
          curl -fsSL -o /tmp/cmdline-tools.zip \
            https://dl.google.com/android/repository/commandlinetools-linux-latest.zip

          rm -rf /tmp/cmdline-tools && mkdir -p /tmp/cmdline-tools
          unzip -q /tmp/cmdline-tools.zip -d /tmp/cmdline-tools

          # zip 内部目录名就是 cmdline-tools
          rm -rf "${SDK_ROOT}/cmdline-tools/latest"
          mv /tmp/cmdline-tools/cmdline-tools "${SDK_ROOT}/cmdline-tools/latest"

          # 暴露 PATH & 环境变量给后续 steps
          {
            echo "ANDROID_SDK_ROOT=${SDK_ROOT}"
            echo "ANDROID_HOME=${SDK_ROOT}"
          } >> "$GITHUB_ENV"
          {
            echo "${SDK_ROOT}/cmdline-tools/latest/bin"
            echo "${SDK_ROOT}/platform-tools"
          } >> "$GITHUB_PATH"

          echo "Commandline-tools installed at: ${SDK_ROOT}/cmdline-tools/latest"

      # 接受许可证 + 分别安装平台与构建工具（带重试；解决偶发 Broken pipe/非零返回码）
      - name: Accept licenses & install Android packages
        shell: bash
        env:
          SDK_ROOT: ${{ env.ANDROID_SDK_ROOT }}
        run: |
          set -euo pipefail
          SDKMANAGER="${SDK_ROOT}/cmdline-tools/latest/bin/sdkmanager"

          # 简单重试函数
          retry() {
            local n=0
            local try=3
            local delay=5
            until "$@"; do
              exit_code=$?
              n=$((n+1))
              if [ $n -lt $try ]; then
                echo "Command failed with exit ${exit_code}. Retrying ($n/$try) in ${delay}s..."
                sleep ${delay}
              else
                echo "Command failed after ${try} attempts."
                return ${exit_code}
              fi
            done
            return 0
          }

          # 许可证（可能打印 Broken pipe/返回非零，容错继续）
          yes | "${SDKMANAGER}" --sdk_root="${SDK_ROOT}" --licenses || echo "licenses returned non-zero; continuing"

          # 分别安装，避免被当成一个包
          retry yes | "${SDKMANAGER}" --sdk_root="${SDK_ROOT}" "${ANDROID_PLATFORM_PKG}"
          retry yes | "${SDKMANAGER}" --sdk_root="${SDK_ROOT}" "${ANDROID_BUILD_TOOLS_PKG}"
          retry yes | "${SDKMANAGER}" --sdk_root="${SDK_ROOT}" "platform-tools"

          echo "Installed packages:"
          "${SDKMANAGER}" --sdk_root="${SDK_ROOT}" --list_installed || true

      # 如果 Android 工程目录不是 project/，请把 working-directory 改成实际路径
      - name: Grant execute permission for gradlew
        working-directory: project
        run: chmod +x ./gradlew

      - name: Build Debug APK
        working-directory: project
        env:
          ANDROID_SDK_ROOT: ${{ env.ANDROID_SDK_ROOT }}
          ANDROID_HOME: ${{ env.ANDROID_SDK_ROOT }}
        run: ./gradlew --no-daemon clean assembleDebug

      # 收集 APK，扁平化重命名，方便下载识别
      - name: Collect & rename APKs (flat)
        id: collect
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p artifacts
          shopt -s globstar nullglob
          count=0
          shortsha="${GITHUB_SHA::7}"
          for apk in project/**/build/outputs/apk/debug/*.apk; do
            module="$(echo "$apk" | sed -E 's#project/([^/]+)/build/outputs/apk/debug/[^/]+$#\1#')"
            [ -z "$module" ] && module="app"
            out="artifacts/${module}-debug-${GITHUB_RUN_NUMBER}-${shortsha}.apk"
            cp -f "$apk" "$out"
            echo "collected: $out"
            count=$((count+1))
          done
          if [ "$count" -eq 0 ]; then
            echo "没有找到 Debug APK；请确认模块路径与 assembleDebug 任务。" >&2
            exit 1
          fi
          echo "apk_count=$count" >> "$GITHUB_OUTPUT"

      - name: Upload Debug APK artifact (flat)
        uses: actions/upload-artifact@v4
        with:
          name: apk-debug-${{ github.run_number }}
          path: artifacts/*.apk
          if-no-files-found: error
          retention-days: 14
