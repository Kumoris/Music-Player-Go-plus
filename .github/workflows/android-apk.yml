name: android-apk (debug)

on:
  push:
    branches: [ "dguo" ]
  pull_request:
    branches: [ "dguo" ]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

env:
  # sdkmanager 需要 JDK 17+
  JAVA_VERSION: "17"
  ANDROID_SDK_ROOT: "/usr/local/lib/android/sdk"
  ANDROID_PLATFORM: "platforms;android-34"
  ANDROID_BUILD_TOOLS: "build-tools;34.0.0"

jobs:
  build-apk-debug:
    name: Build Debug APK
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Java (JDK 17)
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: ${{ env.JAVA_VERSION }}

      - name: Setup Gradle cache
        uses: gradle/actions/setup-gradle@v3

      # 只用这个 action 来确保 cmdline-tools 可用，并接受 SDK 许可证
      - name: Ensure Android cmdline-tools & accept licenses
        uses: android-actions/setup-android@v3
        with:
          accept-android-sdk-licenses: true
          # 不传 packages，避免把多个包当作一个字符串

      # 手动、逐项安装所需包；对 --licenses 返回码做容错
      - name: Install Android SDK packages (platform + build-tools)
        shell: bash
        env:
          SDK_ROOT: ${{ env.ANDROID_SDK_ROOT }}
        run: |
          set -u
          SDKMANAGER="$SDK_ROOT/cmdline-tools/latest/bin/sdkmanager"
          if [ ! -x "$SDKMANAGER" ]; then
            # 兜底：找一个可用的 sdkmanager
            SDKMANAGER="$(find "$SDK_ROOT/cmdline-tools" -type f -path '*/bin/sdkmanager' | sort -r | head -n1 || true)"
          fi
          if [ -z "${SDKMANAGER:-}" ] || [ ! -x "$SDKMANAGER" ]; then
            echo "sdkmanager 未找到，退出。" >&2
            exit 1
          fi

          # 许可可能返回非零，但其实都已接受；做容错继续
          yes | "$SDKMANAGER" --licenses || echo "licenses step returned non-zero, continuing."

          # 分别安装（作为独立参数），避免被当成一个包
          yes | "$SDKMANAGER" "$ANDROID_PLATFORM" || { echo "failed to install $ANDROID_PLATFORM"; exit 1; }
          yes | "$SDKMANAGER" "$ANDROID_BUILD_TOOLS" || { echo "failed to install $ANDROID_BUILD_TOOLS"; exit 1; }
          yes | "$SDKMANAGER" "platform-tools" || true

          echo "Installed packages:"
          "$SDKMANAGER" --list_installed || true

      # Android 工程目录在 project/；如不同请改 working-directory
      - name: Grant execute permission for gradlew
        working-directory: project
        run: chmod +x ./gradlew

      - name: Build Debug APK
        working-directory: project
        run: ./gradlew --no-daemon clean assembleDebug

      # 收集 APK，重命名为扁平、可读的文件名
      - name: Collect & rename APKs (flat)
        id: collect
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p artifacts
          shopt -s globstar nullglob
          count=0
          shortsha="${GITHUB_SHA::7}"
          for apk in project/**/build/outputs/apk/debug/*.apk; do
            module="$(echo "$apk" | sed -E 's#project/([^/]+)/build/outputs/apk/debug/[^/]+$#\1#')"
            [ -z "$module" ] && module="app"
            out="artifacts/${module}-debug-${GITHUB_RUN_NUMBER}-${shortsha}.apk"
            cp -f "$apk" "$out"
            echo "collected: $out"
            count=$((count+1))
          done
          if [ "$count" -eq 0 ]; then
            echo "没有找到 Debug APK；请确认模块路径与 assembleDebug 任务。" >&2
            exit 1
          fi
          echo "apk_count=$count" >> "$GITHUB_OUTPUT"

      - name: Upload Debug APK artifact (flat)
        uses: actions/upload-artifact@v4
        with:
          name: apk-debug-${{ github.run_number }}
          path: artifacts/*.apk
          if-no-files-found: error
          retention-days: 14
